---
description: Modern Angular development guidelines and best practices
globs: modern-angular-guidelines.mdc
alwaysApply: false
---

# MODERN ANGULAR DEVELOPMENT GUIDELINES

> **TL;DR:** This document outlines modern Angular development practices, focusing on Angular 20+ features including standalone components, signals, control flow, and Material Design 3.

## üöÄ MODERN ANGULAR ARCHITECTURE

### Standalone Components
```typescript
// ‚úÖ Modern: Standalone component
@Component({
  selector: 'app-modern-component',
  standalone: true,
  imports: [CommonModule, MaterialModule],
  template: `...`
})
export class ModernComponent {}

// ‚ùå Legacy: NgModule-based component
@Component({
  selector: 'app-legacy-component',
  template: `...`
})
export class LegacyComponent {}
```

### Signals for Reactive State
```typescript
// ‚úÖ Modern: Using signals
@Component({
  selector: 'app-reactive',
  standalone: true,
  template: `
    <div>{{ count() }}</div>
    <button (click)="increment()">Increment</button>
  `
})
export class ReactiveComponent {
  count = signal(0);
  
  increment() {
    this.count.update(c => c + 1);
  }
}
```

### Modern Control Flow
```typescript
// ‚úÖ Modern: Control flow syntax
@Component({
  template: `
    @if (isLoading()) {
      <div>Loading...</div>
    } @else if (hasError()) {
      <div>Error occurred</div>
    } @else {
      @for (item of items(); track item.id) {
        <div>{{ item.name }}</div>
      }
    }
  `
})
export class ModernTemplateComponent {}
```

## üé® MATERIAL DESIGN 3 INTEGRATION

### Modern Material Setup
```bash
# Install Material Design 3
ng add @angular/material

# Choose Material 3 theme
ng add @angular/material --theme=material3
```

### Dynamic Theming
```typescript
// ‚úÖ Modern: Dynamic theming with Material 3
@Component({
  selector: 'app-theme-toggle',
  standalone: true,
  template: `
    <mat-slide-toggle 
      [checked]="isDarkMode()" 
      (change)="toggleTheme()">
      Dark Mode
    </mat-slide-toggle>
  `
})
export class ThemeToggleComponent {
  isDarkMode = signal(false);
  
  toggleTheme() {
    this.isDarkMode.update(mode => !mode);
  }
}
```

## üì± PROGRESSIVE WEB APP FEATURES

### PWA Configuration
```bash
# Add PWA capabilities
ng add @angular/pwa
```

### Service Worker Integration
```typescript
// ‚úÖ Modern: Service worker with signals
@Component({
  selector: 'app-pwa-status',
  standalone: true,
  template: `
    <div>
      @if (isOnline()) {
        <span class="online">Online</span>
      } @else {
        <span class="offline">Offline</span>
      }
    </div>
  `
})
export class PWAStatusComponent {
  isOnline = signal(navigator.onLine);
  
  constructor() {
    window.addEventListener('online', () => this.isOnline.set(true));
    window.addEventListener('offline', () => this.isOnline.set(false));
  }
}
```

## üîß MODERN DEVELOPMENT WORKFLOW

### Project Structure
```
src/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ components/          # Standalone components
‚îÇ   ‚îú‚îÄ‚îÄ services/           # Injectable services
‚îÇ   ‚îú‚îÄ‚îÄ models/             # TypeScript interfaces
‚îÇ   ‚îú‚îÄ‚îÄ utils/              # Utility functions
‚îÇ   ‚îî‚îÄ‚îÄ app.config.ts       # App configuration
‚îú‚îÄ‚îÄ assets/
‚îÇ   ‚îú‚îÄ‚îÄ themes/             # Material Design themes
‚îÇ   ‚îî‚îÄ‚îÄ icons/              # Custom icons
‚îî‚îÄ‚îÄ styles/
    ‚îú‚îÄ‚îÄ material-theme.scss # Material 3 theme
    ‚îî‚îÄ‚îÄ global.scss         # Global styles
```

### Modern Build Configuration
```typescript
// angular.json
{
  "projects": {
    "my-app": {
      "architect": {
        "build": {
          "builder": "@angular-devkit/build-angular:application",
          "options": {
            "outputPath": "dist/my-app",
            "index": "src/index.html",
            "browser": "src/main.ts",
            "polyfills": ["zone.js"],
            "tsConfig": "tsconfig.app.json",
            "inlineStyleLanguage": "scss",
            "assets": ["src/favicon.ico", "src/assets"],
            "styles": ["src/styles.scss"],
            "scripts": []
          }
        }
      }
    }
  }
}
```

## üß™ MODERN TESTING APPROACHES

### Standalone Component Testing
```typescript
// ‚úÖ Modern: Testing standalone components
describe('ModernComponent', () => {
  it('should create', () => {
    TestBed.configureTestingModule({
      imports: [ModernComponent]
    });
    
    const fixture = TestBed.createComponent(ModernComponent);
    expect(fixture.componentInstance).toBeTruthy();
  });
});
```

### Signal Testing
```typescript
// ‚úÖ Modern: Testing signals
it('should update count signal', () => {
  const component = new ReactiveComponent();
  expect(component.count()).toBe(0);
  
  component.increment();
  expect(component.count()).toBe(1);
});
```

## üìä PERFORMANCE OPTIMIZATION

### Lazy Loading with Standalone Components
```typescript
// ‚úÖ Modern: Lazy loading standalone components
const routes: Routes = [
  {
    path: 'feature',
    loadComponent: () => import('./feature/feature.component').then(m => m.FeatureComponent)
  }
];
```

### OnPush Change Detection
```typescript
// ‚úÖ Modern: OnPush with signals
@Component({
  selector: 'app-optimized',
  standalone: true,
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: `...`
})
export class OptimizedComponent {
  data = signal([]);
}
```

## üîç MODERN ANGULAR CHECKLIST

### Development Checklist
- [ ] Using standalone components instead of NgModules
- [ ] Implementing signals for reactive state management
- [ ] Using modern control flow syntax (@if, @for, @switch)
- [ ] Material Design 3 theming implemented
- [ ] PWA features configured (if applicable)
- [ ] Lazy loading implemented for routes
- [ ] OnPush change detection strategy used
- [ ] Modern testing approaches applied
- [ ] TypeScript strict mode enabled
- [ ] ESLint and Prettier configured

### Performance Checklist
- [ ] Tree-shaking optimized with standalone components
- [ ] Bundle size analyzed and optimized
- [ ] Lazy loading implemented for feature modules
- [ ] Service worker configured for caching
- [ ] Images optimized and lazy-loaded
- [ ] Critical CSS inlined
- [ ] Unused code eliminated

## üö® MODERN ANGULAR WARNINGS

### Avoid These Legacy Patterns
- ‚ùå Using NgModules for simple components
- ‚ùå Using RxJS for simple state management (use signals)
- ‚ùå Using *ngIf/*ngFor instead of @if/@for
- ‚ùå Manual change detection triggering
- ‚ùå Not using OnPush change detection
- ‚ùå Not implementing lazy loading
- ‚ùå Using Material Design 2 instead of 3

### Migration Strategies
1. **NgModules ‚Üí Standalone**: Gradually migrate components to standalone
2. **RxJS ‚Üí Signals**: Replace simple observables with signals
3. **Template Syntax**: Update to modern control flow syntax
4. **Material 2 ‚Üí 3**: Migrate to Material Design 3 theming
5. **Testing**: Update tests to work with standalone components

## üìö MODERN ANGULAR RESOURCES

- [Angular Standalone Components](https://angular.io/guide/standalone-components)
- [Angular Signals](https://angular.io/guide/signals)
- [Angular Control Flow](https://angular.io/guide/control-flow)
- [Material Design 3](https://m3.material.io/)
- [Angular PWA](https://angular.io/guide/service-worker-intro)
- [Angular Universal](https://angular.io/guide/universal)