---
alwaysApply: true
---

# GRAPH BANK REPO MODE

Your role is to perform comprehensive repository analysis and documentation generation using Docker-based repomix integration with six different output modes to meet various analysis needs.

> **TL;DR:** Provides comprehensive repository analysis and documentation generation with six different output modes using Docker-based repomix integration for various analysis requirements.

```mermaid
graph TD
    Start["🚀 START REPO MODE"] --> ReadDocs["📚 Read Reference Documents<br>.cursor/rules/isolation_rules/main.mdc"]
    
    %% Mode Selection
    ReadDocs --> ModeSelect["🔍 Repository Analysis<br>Mode Selection"]
    ModeSelect --> Complete["📊 Complete Mode<br>351,116 tokens"]
    ModeSelect --> Compressed["🗜️ Compressed Mode<br>307,073 tokens"]
    ModeSelect --> Source["💻 Source Mode<br>44,080 tokens"]
    ModeSelect --> Minimal["⚡ Minimal Mode<br>41,433 tokens"]
    ModeSelect --> MCP["🔗 MCP Integration<br>50,000 tokens"]
    ModeSelect --> AI["🤖 AI Analysis<br>200,000 tokens"]
    
    %% Docker Execution
    Complete --> DockerExec["🐳 Docker Execution<br>repomix container"]
    Compressed --> DockerExec
    Source --> DockerExec
    Minimal --> DockerExec
    MCP --> DockerExec
    AI --> DockerExec
    
    %% Analysis Process
    DockerExec --> Analysis["📈 Repository Analysis"]
    Analysis --> Output["📄 Generate Output"]
    Output --> Integration["🔄 Graph Bank Integration"]
    Integration --> Complete["🏁 REPO Analysis Complete"]
    
    %% Mode Transitions
    Complete -->|"Analysis Complete"| TransToVan["→ VAN Mode"]
    Complete -->|"Ready for Planning"| TransToPlan["→ PLAN Mode"]
    Complete -->|"Ready for Implementation"| TransToImpl["→ IMPLEMENT Mode"]
    
    %% Validation Options
    Start -.-> Validation["🔍 VALIDATION OPTIONS:<br>- Repository analysis<br>- Docker environment check<br>- Output generation<br>- Integration verification<br>- Mode transition"]
    
    %% Styling
    style Start fill:#4da6ff,stroke:#0066cc,color:white
    style ReadDocs fill:#80bfff,stroke:#4da6ff,color:black
    style ModeSelect fill:#d94dbb,stroke:#a3378a,color:white
    style Complete fill:#4dbb5f,stroke:#36873f,color:white
    style Compressed fill:#ffa64d,stroke:#cc7a30,color:white
    style Source fill:#d971ff,stroke:#a33bc2,color:white
    style Minimal fill:#4dbbbb,stroke:#368787,color:white
    style MCP fill:#ff5555,stroke:#cc0000,color:white
    style AI fill:#ffa64d,stroke:#cc7a30,color:white
    style DockerExec fill:#4da6ff,stroke:#0066cc,color:white
    style Analysis fill:#4dbb5f,stroke:#36873f,color:white
    style Output fill:#d94dbb,stroke:#a3378a,color:white
    style Integration fill:#d971ff,stroke:#a33bc2,color:white
    style Complete fill:#5fd94d,stroke:#3da336,color:white
    style TransToVan fill:#ffa64d,stroke:#cc7a30,color:black
    style TransToPlan fill:#4dbb5f,stroke:#36873f,color:black
    style TransToImpl fill:#4da6ff,stroke:#0066cc,color:black
```

## IMPLEMENTATION STEPS

### Step 1: READ MAIN RULE & CONTEXT FILES
```
read_file({
  target_file: ".cursor/rules/isolation_rules/main.mdc",
  should_read_entire_file: true
})

read_file({
  target_file: "tasks.md",
  should_read_entire_file: true
})

read_file({
  target_file: "progress.md",
  should_read_entire_file: true
})
```

### Step 2: LOAD REPO MODE MAP
```
read_file({
  target_file: ".cursor/rules/isolation_rules/visual-maps/repo-mode-map.mdc",
  should_read_entire_file: true
})
```

### Step 3: LOAD REPOSITORY ANALYSIS REFERENCES
```
read_file({
  target_file: ".cursor/rules/isolation_rules/Core/docker-integration.mdc",
  should_read_entire_file: true
})

read_file({
  target_file: ".cursor/rules/isolation_rules/Core/repomix-configuration.mdc",
  should_read_entire_file: true
})
```

## REPOSITORY ANALYSIS APPROACH

Your task is to perform comprehensive repository analysis using Docker-based repomix integration. Focus on generating structured documentation that meets specific analysis requirements through six different output modes.

### Complete Mode Analysis

For comprehensive project understanding, use the complete mode to analyze all files and generate detailed documentation.

```mermaid
graph TD
    CM["📊 COMPLETE MODE"] --> All["Analyze all files"]
    All --> Structure["Document structure"]
    Structure --> Dependencies["Map dependencies"]
    Dependencies --> Architecture["Identify architecture"]
    Architecture --> Report["Generate comprehensive report"]
    
    style CM fill:#4dbb5f,stroke:#36873f,color:white
    style All fill:#d6f5dd,stroke:#a3e0ae,color:black
    style Structure fill:#d6f5dd,stroke:#a3e0ae,color:black
    style Dependencies fill:#d6f5dd,stroke:#a3e0ae,color:black
    style Architecture fill:#d6f5dd,stroke:#a3e0ae,color:black
    style Report fill:#d6f5dd,stroke:#a3e0ae,color:black
```

### Compressed Mode Analysis

For quick code review and performance analysis, use the compressed mode to reduce token usage while maintaining analysis quality.

```mermaid
graph TD
    COM["🗜️ COMPRESSED MODE"] --> Compress["Apply compression"]
    Compress --> Focus["Focus on key files"]
    Focus --> Analyze["Analyze patterns"]
    Analyze --> Optimize["Identify optimizations"]
    Optimize --> Summary["Generate summary"]
    
    style COM fill:#ffa64d,stroke:#cc7a30,color:white
    style Compress fill:#ffe6cc,stroke:#ffa64d,color:black
    style Focus fill:#ffe6cc,stroke:#ffa64d,color:black
    style Analyze fill:#ffe6cc,stroke:#ffa64d,color:black
    style Optimize fill:#ffe6cc,stroke:#ffa64d,color:black
    style Summary fill:#ffe6cc,stroke:#ffa64d,color:black
```

### Source Code Mode Analysis

For feature development and code generation, use the source code mode to focus on implementation files.

```mermaid
graph TD
    SC["💻 SOURCE MODE"] --> Source["Focus on source files"]
    Source --> Types["TypeScript files"]
    Source --> HTML["HTML templates"]
    Source --> Styles["SCSS styles"]
    Types & HTML & Styles --> Generate["Generate code insights"]
    Generate --> Implement["Implementation guidance"]
    
    style SC fill:#d971ff,stroke:#a33bc2,color:white
    style Source fill:#f5d9f0,stroke:#e699d9,color:black
    style Types fill:#f5d9f0,stroke:#e699d9,color:black
    style HTML fill:#f5d9f0,stroke:#e699d9,color:black
    style Styles fill:#f5d9f0,stroke:#e699d9,color:black
    style Generate fill:#f5d9f0,stroke:#e699d9,color:black
    style Implement fill:#f5d9f0,stroke:#e699d9,color:black
```

## REPOSITORY ANALYSIS DOCUMENTATION

Document each analysis mode with clear output specifications. Start by describing the analysis requirements, then execute the appropriate Docker commands, and conclude with integration into the Graph Bank system.

```mermaid
graph TD
    RAD["📄 REPOSITORY ANALYSIS DOCUMENTATION"] --> Start["🚀 START ANALYSIS"]
    Start --> Select["Mode Selection<br>Which analysis mode is needed?"]
    Select --> Docker["Docker Execution<br>Execute repomix container"]
    Docker --> Process["Analysis Processing<br>Process repository data"]
    Process --> Output["Output Generation<br>Generate structured documentation"]
    Output --> Integrate["Graph Bank Integration<br>Integrate with Graph Bank"]
    Integrate --> Complete["🏁 ANALYSIS COMPLETE"]
    
    style RAD fill:#4da6ff,stroke:#0066cc,color:white
    style Start fill:#cce6ff,stroke:#80bfff,color:black
    style Select fill:#cce6ff,stroke:#80bfff,color:black
    style Docker fill:#cce6ff,stroke:#80bfff,color:black
    style Process fill:#cce6ff,stroke:#80bfff,color:black
    style Output fill:#cce6ff,stroke:#80bfff,color:black
    style Integrate fill:#cce6ff,stroke:#80bfff,color:black
    style Complete fill:#cce6ff,stroke:#80bfff,color:black
```

## VERIFICATION

```mermaid
graph TD
    V["✅ VERIFICATION CHECKLIST"] --> D["Docker environment ready?"]
    V --> R["Repomix image available?"]
    V --> A["Analysis target clear?"]
    V --> C["Cost constraints considered?"]
    V --> P["Project path correct?"]
    V --> O["Output file generated?"]
    V --> I["Content integrity verified?"]
    
    D & R & A & C & P & O & I --> Decision{"All Verified?"}
    Decision -->|"Yes"| Complete["Repository analysis complete"]
    Decision -->|"No"| Fix["Complete missing items"]
    
    style V fill:#4dbbbb,stroke:#368787,color:white
    style Decision fill:#ffa64d,stroke:#cc7a30,color:white
    style Complete fill:#5fd94d,stroke:#3da336,color:white
    style Fix fill:#ff5555,stroke:#cc0000,color:white
```

Before completing the repository analysis, verify that the Docker environment is ready, repomix image is available, analysis target is clear, cost constraints are considered, project path is correct, output file is generated, and content integrity is verified. Update tasks.md with the analysis status and prepare for the next appropriate mode.