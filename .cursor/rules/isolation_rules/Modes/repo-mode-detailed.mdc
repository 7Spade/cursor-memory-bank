---
description: Detailed REPO mode instructions for comprehensive repository analysis and documentation generation
globs: repo-mode-detailed.mdc
alwaysApply: false
---

# REPO MODE - 詳細指令

> **TL;DR:** 此文件提供詳細的 REPO 模式指令，用於全面的倉庫分析和文檔生成，包含六種不同的輸出模式以滿足各種分析需求。

## 🔧 REPO MODE 技術架構

### MCP 工具整合
REPO 模式使用 **repomix-docker** MCP 工具，該工具已預配置在 `.cursor/mcp.json` 中：

```json
"repomix-docker": {
  "command": "docker",
  "args": [
    "run",
    "-i",
    "--rm",
    "ghcr.io/yamadashy/repomix",
    "--mcp"
  ],
  "disabled": false,
  "autoApprove": [],
  "retry": {
    "enabled": true,
    "maxAttempts": 3,
    "delay": 2000,
    "backoffMultiplier": 1.5,
    "maxDelay": 10000
  }
}
```

### 工具功能
- **pack_codebase**: 打包本地代碼目錄進行 AI 分析
- **pack_remote_repository**: 獲取並打包遠程 GitHub 倉庫
- **attach_packed_output**: 附加現有的 Repomix 輸出文件
- **read_repomix_output**: 讀取 Repomix 生成的輸出文件內容
- **grep_repomix_output**: 在 Repomix 輸出中搜索模式
- **file_system_read_file**: 讀取本地文件系統文件
- **file_system_read_directory**: 列出目錄內容

## 🚀 REPO MODE 啟動

**重要：** REPO 模式使用 **repomix-docker** MCP 工具進行倉庫分析，該工具已配置在 `.cursor/mcp.json` 中。

當您輸入 `repo` 時，系統會自動顯示模式選擇選單：

```
🔍 REPO MODE - 倉庫分析模式選擇
=====================================

請選擇分析模式：

1️⃣  [完整模式] - 深度分析，完整理解 (351,116 tokens)
2️⃣  [壓縮模式] - 快速審查，代碼分析 (307,073 tokens)  
3️⃣  [源碼模式] - 功能開發，代碼生成 (44,080 tokens)
4️⃣  [極致節省] - 成本敏感，快速概覽 (41,433 tokens)
5️⃣  [MCP 整合模式] - 與 MCP 服務器整合分析 (50,000 tokens)
6️⃣  [智能分析模式] - AI 驅動的深度分析 (200,000 tokens)

💡 提示：輸入對應數字 (1-6) 或模式名稱來選擇
```

## 📊 六種模式綜合對比

> **注意：** 以下命令為 Docker 直接使用方式，實際 REPO 模式會通過 **repomix-docker** MCP 工具執行，提供更好的整合體驗。

| 模式 | Token | 文件數 | 適用場景 | MCP 工具使用 |
|------|-------|--------|----------|-------------|
| **完整模式** | 351,116 | 147 | 新專案架構分析、完整代碼審查 | `pack_codebase` (style: markdown, topFilesLength: 20) |
| **壓縮模式** | 307,073 | 147 | 快速代碼審查、性能瓶頸分析 | `pack_codebase` (compress: true, topFilesLength: 10) |
| **源碼模式** | 44,080 | 5 | 新功能開發、代碼生成和補全 | `pack_codebase` (includePatterns: "src/**/*.ts,src/**/*.html,src/**/*.scss,*.md,*.json") |
| **極致節省** | 41,433 | 4 | 成本敏感分析、快速專案概覽 | `pack_codebase` (compress: true, minimal output) |
| **MCP 整合** | 50,000 | 8 | MCP 服務器配置分析、協議兼容性檢查 | `pack_codebase` (includePatterns: "**/*.mcp.*,**/*mcp*,**/*.json,**/*.yaml,**/*.yml") |
| **智能分析** | 200,000 | 50 | AI 代碼分析、智能重構建議 | `pack_codebase` (compress: true, AI-optimized settings) |

### Docker 命令對照（參考用）
| 模式 | Docker 命令 |
|------|-------------|
| **完整模式** | `docker run -v ${PWD}:/app -it --rm ghcr.io/yamadashy/repomix --style markdown --top-files-len 20 --output complete-analysis.md` |
| **壓縮模式** | `docker run -v ${PWD}:/app -it --rm ghcr.io/yamadashy/repomix --compress --style markdown --top-files-len 10 --output compressed-analysis.md` |
| **源碼模式** | `docker run -v ${PWD}:/app -it --rm ghcr.io/yamadashy/repomix --include "src/**/*.ts,src/**/*.html,src/**/*.scss,*.md,*.json" --style markdown --top-files-len 5 --output source-code.md` |
| **極致節省** | `docker run -v ${PWD}:/app -it --rm ghcr.io/yamadashy/repomix --compress --remove-comments --remove-empty-lines --no-file-summary --no-directory-structure --include "src/**/*.ts,src/**/*.html,*.md" --style markdown --output minimal-analysis.md` |
| **MCP 整合** | `docker run -v ${PWD}:/app -it --rm ghcr.io/yamadashy/repomix --include "**/*.mcp.*,**/*mcp*,**/*.json,**/*.yaml,**/*.yml" --style markdown --top-files-len 8 --output mcp-integration-analysis.md` |
| **智能分析** | `docker run -v ${PWD}:/app -it --rm ghcr.io/yamadashy/repomix --compress --include "src/**/*,*.md,*.json,*.yaml,*.yml" --style markdown --top-files-len 15 --output ai-analysis.md` |

## 📋 模式選擇決策樹

```mermaid
graph TD
    Start["開始 REPO 分析"] --> Q1{"需要完整理解?"}
    Q1 -->|Yes| Q2{"成本敏感?"}
    Q1 -->|No| Q3{"專注代碼開發?"}
    Q1 -->|MCP整合| MCP["MCP 整合模式"]
    
    Q2 -->|Yes| Minimal["極致節省模式"]
    Q2 -->|No| Complete["完整模式"]
    
    Q3 -->|Yes| Q4{"需要 AI 分析?"}
    Q3 -->|No| Compressed["壓縮模式"]
    
    Q4 -->|Yes| AI["智能分析模式"]
    Q4 -->|No| Source["源碼模式"]
    
    Complete --> Execute["執行分析"]
    Compressed --> Execute
    Source --> Execute
    Minimal --> Execute
    MCP --> Execute
    AI --> Execute
```

## 🎮 快速選擇指令

```bash
# 直接執行模式（跳過選單）
repo complete    # 完整模式
repo compressed  # 壓縮模式
repo source      # 源碼模式
repo minimal     # 極致節省模式
repo mcp         # MCP 整合模式
repo ai          # 智能分析模式
```

## 🔧 進階配置選項

### 自定義包含模式
```bash
# 特定技術棧
docker run -v ${PWD}:/app -it --rm ghcr.io/yamadashy/repomix --include "src/**/*.ts,src/**/*.html,src/**/*.scss" --style markdown --output typescript-only.md

# 配置文件
docker run -v ${PWD}:/app -it --rm ghcr.io/yamadashy/repomix --include "*.json,*.yaml,*.yml,*.config.*" --style markdown --output config-files.md

# Git 歷史
docker run -v ${PWD}:/app -it --rm ghcr.io/yamadashy/repomix --include-logs --include-diffs --style markdown --output with-history.md

# 不同格式
docker run -v ${PWD}:/app -it --rm ghcr.io/yamadashy/repomix --style json --output project-data.json
docker run -v ${PWD}:/app -it --rm ghcr.io/yamadashy/repomix --style xml --output project-structure.xml
```

## 🚀 最佳實踐

### 模式選擇原則
- **完整模式**: 新專案、重大重構、架構分析
- **壓縮模式**: 代碼審查、性能分析、技術評估
- **源碼模式**: 功能開發、模組設計、API 開發
- **極致節省**: 成本敏感、快速概覽、初步分析
- **MCP 整合**: MCP 服務器配置、協議分析、工具整合
- **智能分析**: AI 驅動分析、智能重構、架構優化

### 輸出優化技巧
- 使用 `--top-files-len` 控制摘要長度
- 利用 `--include` 和 `--ignore` 精確控制內容
- 根據需要選擇不同的輸出格式
- 定期更新 repomix 輸出以保持同步

## 📋 檢查清單

```
✓ REPO MODE 檢查清單
- 分析目標明確? [YES/NO]
- 成本限制考慮? [YES/NO]
- Docker 環境正常? [YES/NO]
- 專案路徑正確? [YES/NO]
- 輸出文件生成? [YES/NO]
- 內容完整性驗證? [YES/NO]

→ 如果全部 YES: REPO 分析完成
→ 如果有 NO: 檢查環境和配置
```

## 🔄 與其他模式整合

| 整合模式 | 用途 | 輸出 |
|----------|------|------|
| **REPO → VAN** | 專案結構分析、技術棧識別、複雜度評估 | VAN 模式分析 |
| **REPO → PLAN** | 基於代碼結構制定計劃、識別依賴關係 | PLAN 模式規劃 |
| **REPO → CREATIVE** | 分析現有架構、識別改進機會 | CREATIVE 模式設計 |
| **REPO → MCP** | MCP 工具配置、協議兼容性檢查 | MCP 服務器整合 |

## 🚨 常見問題解決

| 問題 | 解決方案 |
|------|----------|
| **Docker 權限錯誤** | `docker run -v ${PWD}:/app -it --rm ghcr.io/yamadashy/repomix` |
| **輸出文件過大** | 使用壓縮模式：`--compress` |
| **包含不需要的文件** | 使用 `--ignore "*.test.*,*.spec.*"` |
| **MCP 服務器連接失敗** | 檢查 MCP 服務器配置和網絡連接 |
| **AI 分析結果不準確** | 使用智能分析模式並檢查配置 |

## 📚 相關資源

- [Repomix 官方文檔](https://github.com/yamadashy/repomix)
- [Docker 使用指南](https://docs.docker.com/)
- [MCP 協議文檔](https://docs.claude.com/en/docs/agents-and-tools/mcp-connector)
- [Graph Bank 整合指南](graph-bank-integration.md)

---

這個 REPO 模式提供了全面的倉庫分析能力，通過六種不同的輸出模式滿足各種分析需求，同時優化令牌使用和處理效率，並整合 MCP 協議和 AI 分析功能。