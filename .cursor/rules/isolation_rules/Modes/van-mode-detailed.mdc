---
description: Zero-cognition VAN mode for project analysis
globs: "**/van-mode-detailed*/**"
alwaysApply: false
---

# VAN MODE - 零認知專案分析

> **零認知原則**: 自動化專案分析，智能複雜度確定，隱藏技術細節

```mermaid
graph TD
    Start["🔍 VAN"] --> AutoAnalysis["⚡ 自動專案分析"]
    AutoAnalysis --> Structure["📁 目錄結構掃描"]
    AutoAnalysis --> TechStack["🔧 技術棧識別"]
    AutoAnalysis --> Complexity["🧩 複雜度確定"]
    
    Structure --> Assessment["📊 評估報告"]
    TechStack --> Assessment
    Complexity --> Assessment
    
    Assessment --> Level{"📋 任務級別?"}
    Level -->|"Level 1"| L1["⚡ 快速修復"]
    Level -->|"Level 2"| L2["🔨 簡單增強"]
    Level -->|"Level 3"| L3["🏗️ 中級功能"]
    Level -->|"Level 4"| L4["🚀 複雜系統"]
    
    L1 --> Next1["⏭️ → IMPLEMENT"]
    L2 --> Next2["⏭️ → PLAN"]
    L3 --> Next3["⏭️ → PLAN"]
    L4 --> Next4["⏭️ → PLAN"]
    
    style Start fill:#4da6ff,stroke:#0066cc,color:white
    style AutoAnalysis fill:#ffa64d,stroke:#cc7a30,color:white
    style Assessment fill:#4dbb5f,stroke:#36873f,color:white
```

## ⚡ 自動化分析流程

### 📁 目錄結構掃描
```markdown
✓ 自動掃描項目
- 專案根目錄結構
- 主要文件和目錄
- 文件組織模式
- 配置文件存在性
- 專案規模評估
```

### 🔧 技術棧識別
```markdown
✓ 自動識別技術
- 前端框架 (Angular, React, Vue)
- 後端技術 (Node.js, Python, Java)
- 數據庫技術 (MongoDB, PostgreSQL)
- 構建工具 (Webpack, Vite, Angular CLI)
- 測試框架 (Jest, Karma, Jasmine)
```

### 🧩 複雜度確定
```markdown
✓ 自動評估複雜度
- 文件數量和代碼行數
- 組件複雜度分析
- 架構複雜度評估
- 代碼質量指標
- 技術債務識別
```

## 🎯 零認知任務級別

### Level 1 - 快速修復
```markdown
⚡ 自動識別特徵
- 簡單的 bug 修復
- 小的樣式調整
- 配置變更
- 文檔更新
- 單一組件修改
```

### Level 2 - 簡單增強
```markdown
🔨 自動識別特徵
- 新功能添加
- 組件修改
- 服務整合
- 測試添加
- 多組件協作
```

### Level 3 - 中級功能
```markdown
🏗️ 自動識別特徵
- 複雜功能開發
- 架構重構
- 多組件整合
- 性能優化
- 系統級變更
```

### Level 4 - 複雜系統
```markdown
🚀 自動識別特徵
- 大型功能開發
- 系統架構設計
- 多模塊整合
- 企業級解決方案
- 跨系統整合
```

## 📊 智能評估報告

### 自動生成報告
```markdown
## 📋 VAN 分析報告
- 專案類型: [Web應用/移動應用/桌面應用]
- 技術棧: [主要技術列表]
- 複雜度: [Level 1-4]
- 任務級別: [建議的處理級別]
- 下一步: [推薦的模式轉換]

## 🔄 自動模式轉換
- Level 1: → IMPLEMENT 模式
- Level 2: → PLAN 模式
- Level 3: → PLAN 模式
- Level 4: → PLAN 模式
```

## 🔄 零認知整合

### 自動上下文傳遞
```markdown
VAN 完成後，其他模式自動獲得：
- 專案結構理解
- 技術棧識別結果
- 複雜度評估
- 任務級別確定
- 專案背景分析

無需重複分析，直接進入專項工作
```

## 📝 使用指南

### 何時使用
- 開始新專案分析
- 重新評估專案狀態
- 專案結構重大變化
- 確定任務複雜度
- 準備進入其他開發模式

### 零認知檢查清單
```markdown
✓ VAN 模式執行清單
- [ ] 自動專案結構分析
- [ ] 自動技術棧識別
- [ ] 自動依賴關係分析
- [ ] 自動代碼複雜度評估
- [ ] 自動任務級別確定
- [ ] 自動專案上下文建立
- [ ] 自動 Graph Bank 文件更新
- [ ] 自動分析報告生成
- [ ] 自動模式轉換建議
```

## 🎯 成功標準

### 零認知完成標誌
- 專案結構分析自動完成
- 技術棧識別自動準確
- 複雜度評估自動正確
- 任務級別自動確定
- 專案上下文自動建立
- Graph Bank 文件自動更新
- 分析報告自動生成
- 模式轉換建議自動提供

### 自動輸出成果
```markdown
## 📊 VAN 模式自動輸出
- 專案結構圖
- 技術棧清單
- 複雜度評估報告
- 任務級別建議
- 專案上下文文檔
- Graph Bank 更新記錄
- 下一步模式建議
```

## 🔄 持續改進

### 自動化優化
- 自動改進專案結構識別算法
- 自動增強技術棧檢測準確性
- 自動優化複雜度評估模型
- 自動完善任務級別分類標準
- 自動提升分析報告質量

### 智能整合
- 自動改善與 INIT 模式的協作
- 自動優化與後續模式的轉換
- 自動增強 Graph Bank 整合
- 自動完善錯誤處理機制
- 自動提升用戶體驗