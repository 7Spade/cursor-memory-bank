---
description: Detailed VAN mode instructions for comprehensive project analysis and initialization
globs: "**/van-mode-detailed*/**"
alwaysApply: false
---

# VAN MODE - 詳細初始化指令

> **TL;DR:** 提供詳細的專案分析、複雜度確定和初始化流程，包含完整的 Mermaid 流程圖和驗證檢查點。

```mermaid
graph TD
    %% Main Command Detection
    Start["User Command"] --> CommandDetect{"Command<br>Type?"}
    
    CommandDetect -->|"VAN"| VAN["VAN Mode"]
    CommandDetect -->|"PLAN"| Plan["PLAN Mode"]
    CommandDetect -->|"CREATIVE"| Creative["CREATIVE Mode"]
    CommandDetect -->|"IMPLEMENT"| Implement["IMPLEMENT Mode"]
    CommandDetect -->|"QA"| QA["QA Mode"]
    
    %% Immediate Response Node
    VAN --> VanResp["Respond: OK VAN"]
    Plan --> PlanResp["Respond: OK PLAN"]
    Creative --> CreativeResp["Respond: OK CREATIVE"]
    Implement --> ImplResp["Respond: OK IMPLEMENT"]
    QA --> QAResp["Respond: OK QA"]
    
    %% Graph Bank Check
    VanResp --> CheckGB_Van["Check Graph Bank<br>& tasks.md Status"]
    PlanResp --> CheckGB_Plan["Check Graph Bank<br>& tasks.md Status"]
    CreativeResp --> CheckGB_Creative["Check Graph Bank<br>& tasks.md Status"]
    ImplResp --> CheckGB_Impl["Check Graph Bank<br>& tasks.md Status"]
    QAResp --> CheckGB_QA["Check Graph Bank<br>& tasks.md Status"]
    
    %% Rule Loading
    CheckGB_Van --> LoadVan["Load Rule:<br>isolation_rules/visual-maps/van_mode_split/van-mode-map"]
    CheckGB_Plan --> LoadPlan["Load Rule:<br>isolation_rules/visual-maps/plan-mode-map"]
    CheckGB_Creative --> LoadCreative["Load Rule:<br>isolation_rules/visual-maps/creative-mode-map"]
    CheckGB_Impl --> LoadImpl["Load Rule:<br>isolation_rules/visual-maps/implement-mode-map"]
    CheckGB_QA --> LoadQA["Load Rule:<br>isolation_rules/visual-maps/qa-mode-map"]
    
    %% Rule Execution with Graph Bank Updates
    LoadVan --> ExecVan["Execute Process<br>in Rule"]
    LoadPlan --> ExecPlan["Execute Process<br>in Rule"]
    LoadCreative --> ExecCreative["Execute Process<br>in Rule"]
    LoadImpl --> ExecImpl["Execute Process<br>in Rule"]
    LoadQA --> ExecQA["Execute Process<br>in Rule"]
    
    %% Graph Bank Continuous Updates
    ExecVan --> UpdateGB_Van["Update Graph Bank<br>& tasks.md"]
    ExecPlan --> UpdateGB_Plan["Update Graph Bank<br>& tasks.md"]
    ExecCreative --> UpdateGB_Creative["Update Graph Bank<br>& tasks.md"]
    ExecImpl --> UpdateGB_Impl["Update Graph Bank<br>& tasks.md"]
    ExecQA --> UpdateGB_QA["Update Graph Bank<br>& tasks.md"]
    
    %% Verification with Graph Bank Checks
    UpdateGB_Van --> VerifyVan{"Process<br>Complete?"}
    UpdateGB_Plan --> VerifyPlan{"Process<br>Complete?"}
    UpdateGB_Creative --> VerifyCreative{"Process<br>Complete?"}
    UpdateGB_Impl --> VerifyImpl{"Process<br>Complete?"}
    UpdateGB_QA --> VerifyQA{"Process<br>Complete?"}
    
    %% Outcomes
    VerifyVan -->|"Yes"| CompleteVan["VAN Process<br>Complete"]
    VerifyVan -->|"No"| RetryVan["Resume<br>VAN Process"]
    RetryVan --- ReadGB_Van["Reference Graph Bank<br>for Context"]
    ReadGB_Van --> ExecVan
    
    VerifyPlan -->|"Yes"| CompletePlan["PLAN Process<br>Complete"]
    VerifyPlan -->|"No"| RetryPlan["Resume<br>PLAN Process"]
    RetryPlan --- ReadGB_Plan["Reference Graph Bank<br>for Context"]
    ReadGB_Plan --> ExecPlan
    
    VerifyCreative -->|"Yes"| CompleteCreative["CREATIVE Process<br>Complete"]
    VerifyCreative -->|"No"| RetryCreative["Resume<br>CREATIVE Process"]
    RetryCreative --- ReadGB_Creative["Reference Graph Bank<br>for Context"]
    ReadGB_Creative --> ExecCreative
    
    VerifyImpl -->|"Yes"| CompleteImpl["IMPLEMENT Process<br>Complete"]
    VerifyImpl -->|"No"| RetryImpl["Resume<br>IMPLEMENT Process"]
    RetryImpl --- ReadGB_Impl["Reference Graph Bank<br>for Context"]
    ReadGB_Impl --> ExecImpl
    
    VerifyQA -->|"Yes"| CompleteQA["QA Process<br>Complete"]
    VerifyQA -->|"No"| RetryQA["Resume<br>QA Process"]
    RetryQA --- ReadGB_QA["Reference Graph Bank<br>for Context"]
    ReadGB_QA --> ExecQA
    
    %% Final Graph Bank Updates at Completion
    CompleteVan --> FinalGB_Van["Update Graph Bank<br>with Completion Status"]
    CompletePlan --> FinalGB_Plan["Update Graph Bank<br>with Completion Status"]
    CompleteCreative --> FinalGB_Creative["Update Graph Bank<br>with Completion Status"]
    CompleteImpl --> FinalGB_Impl["Update Graph Bank<br>with Completion Status"]
    CompleteQA --> FinalGB_QA["Update Graph Bank<br>with Completion Status"]
    
    %% Mode Transitions with Graph Bank Preservation
    FinalGB_Van -->|"Level 1"| TransToImpl["→ IMPLEMENT Mode"]
    FinalGB_Van -->|"Level 2-4"| TransToPlan["→ PLAN Mode"]
    FinalGB_Plan --> TransToCreative["→ CREATIVE Mode"]
    FinalGB_Creative --> TransToImpl2["→ IMPLEMENT Mode"]
    FinalGB_Impl --> TransToQA["→ QA Mode"]
    
    %% Graph Bank System
    GraphBank["GRAPH BANK<br>CENTRAL SYSTEM"] -.-> tasks["tasks.md<br>Source of Truth"]
    GraphBank -.-> projBrief["projectbrief.md<br>Foundation"]
    GraphBank -.-> active["activeContext.md<br>Current Focus"]
    GraphBank -.-> progress["progress.md<br>Implementation Status"]
    
    CheckGB_Van & CheckGB_Plan & CheckGB_Creative & CheckGB_Impl & CheckGB_QA -.-> GraphBank
    UpdateGB_Van & UpdateGB_Plan & UpdateGB_Creative & UpdateGB_Impl & UpdateGB_QA -.-> GraphBank
    ReadGB_Van & ReadGB_Plan & ReadGB_Creative & ReadGB_Impl & ReadGB_QA -.-> GraphBank
    FinalGB_Van & FinalGB_Plan & FinalGB_Creative & FinalGB_Impl & FinalGB_QA -.-> GraphBank
    
    %% Error Handling
    Error["⚠️ ERROR<br>DETECTION"] -->|"Todo App"| BlockCreative["⛔ BLOCK<br>creative-mode-map"]
    Error -->|"Multiple Rules"| BlockMulti["⛔ BLOCK<br>Multiple Rules"]
    Error -->|"Rule Loading"| UseCorrectFn["✓ Use fetch_rules<br>NOT read_file"]
    
    %% Styling
    style Start fill:#f8d486,stroke:#e8b84d,color:black
    style CommandDetect fill:#f8d486,stroke:#e8b84d,color:black
    style VAN fill:#ccf,stroke:#333,color:black
    style Plan fill:#cfc,stroke:#333,color:black
    style Creative fill:#fcf,stroke:#333,color:black
    style Implement fill:#cff,stroke:#333,color:black
    style QA fill:#fcc,stroke:#333,color:black
    
    style VanResp fill:#d9e6ff,stroke:#99ccff,color:black
    style PlanResp fill:#d9e6ff,stroke:#99ccff,color:black
    style CreativeResp fill:#d9e6ff,stroke:#99ccff,color:black
    style ImplResp fill:#d9e6ff,stroke:#99ccff,color:black
    style QAResp fill:#d9e6ff,stroke:#99ccff,color:black
    
    style LoadVan fill:#a3dded,stroke:#4db8db,color:black
    style LoadPlan fill:#a3dded,stroke:#4db8db,color:black
    style LoadCreative fill:#a3dded,stroke:#4db8db,color:black
    style LoadImpl fill:#a3dded,stroke:#4db8db,color:black
    style LoadQA fill:#a3dded,stroke:#4db8db,color:black
    
    style ExecVan fill:#a3e0ae,stroke:#4dbb5f,color:black
    style ExecPlan fill:#a3e0ae,stroke:#4dbb5f,color:black
    style ExecCreative fill:#a3e0ae,stroke:#4dbb5f,color:black
    style ExecImpl fill:#a3e0ae,stroke:#4dbb5f,color:black
    style ExecQA fill:#a3e0ae,stroke:#4dbb5f,color:black
    
    style VerifyVan fill:#e699d9,stroke:#d94dbb,color:black
    style VerifyPlan fill:#e699d9,stroke:#d94dbb,color:black
    style VerifyCreative fill:#e699d9,stroke:#d94dbb,color:black
    style VerifyImpl fill:#e699d9,stroke:#d94dbb,color:black
    style VerifyQA fill:#e699d9,stroke:#d94dbb,color:black
    
    style CompleteVan fill:#8cff8c,stroke:#4dbb5f,color:black
    style CompletePlan fill:#8cff8c,stroke:#4dbb5f,color:black
    style CompleteCreative fill:#8cff8c,stroke:#4dbb5f,color:black
    style CompleteImpl fill:#8cff8c,stroke:#4dbb5f,color:black
    style CompleteQA fill:#8cff8c,stroke:#4dbb5f,color:black
    
    style GraphBank fill:#f9d77e,stroke:#d9b95c,stroke-width:2px,color:black
    style tasks fill:#f9d77e,stroke:#d9b95c,color:black
    style projBrief fill:#f9d77e,stroke:#d9b95c,color:black
    style active fill:#f9d77e,stroke:#d9b95c,color:black
    style progress fill:#f9d77e,stroke:#d9b95c,color:black
    
    style Error fill:#ff5555,stroke:#cc0000,color:white,stroke-width:2px,color:black
    style BlockCreative fill:#ffaaaa,stroke:#ff8080,color:black
    style BlockMulti fill:#ffaaaa,stroke:#ff8080,color:black
    style UseCorrectFn fill:#8cff8c,stroke:#4dbb5f,color:black
```

## GRAPH BANK FILE STRUCTURE

```mermaid
flowchart TD
    PB([projectbrief.md]) --> PC([productContext.md])
    PB --> SP([systemPatterns.md])
    PB --> TC([techContext.md])
    
    PC & SP & TC --> AC([activeContext.md])
    
    AC --> P([progress.md])
    AC --> Tasks([tasks.md])

    style PB fill:#f9d77e,stroke:#d9b95c,color:black
    style PC fill:#a8d5ff,stroke:#88b5e0,color:black
    style SP fill:#a8d5ff,stroke:#88b5e0,color:black
    style TC fill:#a8d5ff,stroke:#88b5e0,color:black
    style AC fill:#c5e8b7,stroke:#a5c897,color:black
    style P fill:#f4b8c4,stroke:#d498a4,color:black
    style Tasks fill:#f4b8c4,stroke:#d498a4,stroke-width:3px,color:black
```

## VERIFICATION COMMITMENT

```
┌─────────────────────────────────────────────────────┐
│ I WILL follow the appropriate visual process map    │
│ I WILL run all verification checkpoints             │
│ I WILL maintain tasks.md as the single source of    │
│ truth for all task tracking                         │
└─────────────────────────────────────────────────────┘
```