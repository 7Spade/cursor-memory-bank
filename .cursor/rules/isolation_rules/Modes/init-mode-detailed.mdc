---
description: Zero-cognition INIT mode for system initialization
globs: "**/init-mode-detailed*/**"
alwaysApply: false
---

# INIT MODE - 零認知系統初始化

> **零認知原則**: 自動化系統檢查，隱藏複雜實現，提供簡潔接口

```mermaid
graph TD
    Start["🚀 INIT"] --> AutoCheck["⚡ 自動系統檢查"]
    AutoCheck --> MCP["🧠 MCP Memory Server"]
    AutoCheck --> Graph["📁 Graph Bank"]
    AutoCheck --> Env["🔧 環境驗證"]
    
    MCP --> Status["📊 狀態報告"]
    Graph --> Status
    Env --> Status
    
    Status --> Ready{"✅ 系統就緒?"}
    Ready -->|"是"| Complete["🎯 初始化完成"]
    Ready -->|"否"| Fix["🔧 自動修復"]
    Fix --> AutoCheck
    
    Complete --> Next["⏭️ 準備下一模式"]
    
    style Start fill:#4da6ff,stroke:#0066cc,color:white
    style AutoCheck fill:#ffa64d,stroke:#cc7a30,color:white
    style Complete fill:#4dbb5f,stroke:#36873f,color:white
```

## ⚡ 自動化檢查流程

### 🧠 MCP Memory Server
```markdown
✓ 自動檢查項目
- memory.json 存在且格式正確
- 連接狀態正常
- 語義搜索功能可用
- 記憶體數據完整性
```

### 📁 Graph Bank
```markdown
✓ 自動檢查項目  
- graph-bank/ 目錄結構
- tasks.md 可讀寫
- activeContext.md 可讀寫
- progress.md 可讀寫
```

### 🔧 環境驗證
```markdown
✓ 自動檢查項目
- Node.js 版本符合要求
- yarn 包管理器可用
- Cursor IDE 版本檢查
- 文件系統權限驗證
```

## 🎯 零認知操作

### 自動初始化
```markdown
1. 系統健康檢查 → 自動執行
2. MCP Memory Server 設置 → 自動配置
3. Graph Bank 文件初始化 → 自動創建
4. 基礎上下文建立 → 自動載入
5. 狀態報告生成 → 自動生成
```

### 智能修復
```markdown
🔧 自動修復機制
- MCP 連接失敗 → 自動重連
- Graph Bank 文件缺失 → 自動創建
- 環境配置錯誤 → 自動檢測
- 依賴問題 → 自動修復建議
```

## 📊 狀態報告

### 系統狀態概覽
```markdown
## ✅ INIT 完成報告
- MCP Memory Server: [READY/ERROR]
- Graph Bank: [READY/ERROR]  
- 開發環境: [READY/ERROR]
- 專案依賴: [READY/ERROR]

## 📋 下一步建議
- Level 1: → VAN → IMPLEMENT
- Level 2: → VAN → PLAN → IMPLEMENT → REFLECT
- Level 3-4: → VAN → PLAN → CREATIVE → IMPLEMENT → REFLECT → ARCHIVE
```

## 🔄 模式整合

### 零認知轉換
```markdown
INIT 完成後，其他模式自動獲得：
- 系統健康狀態
- MCP Memory Server 連接
- Graph Bank 文件結構
- 開發環境配置

無需重複檢查，直接進入專項工作
```

## 📝 使用指南

### 何時使用
- 開始新專案
- 系統環境變化
- 長時間未使用後重啟
- 系統錯誤需要重新初始化

### 零認知檢查清單
```markdown
✓ INIT 模式執行清單
- [ ] 自動系統健康檢查
- [ ] 自動 MCP Memory Server 驗證
- [ ] 自動 Graph Bank 文件檢查
- [ ] 自動環境配置驗證
- [ ] 自動依賴完整性檢查
- [ ] 自動系統組件初始化
- [ ] 自動基礎上下文建立
- [ ] 自動狀態報告生成
- [ ] 自動系統準備確認
- [ ] 自動下一步建議提供
```

## 🎯 成功標準

### 零認知完成標誌
- 所有系統組件狀態為 READY
- MCP Memory Server 自動連接
- Graph Bank 文件結構自動完整
- 開發環境自動配置正確
- 專案依賴自動完整可用
- 系統上下文自動建立完成
- 狀態報告自動生成成功

### 自動錯誤處理
```markdown
🔧 自動修復機制
- MCP Memory Server 連接失敗 → 自動檢查 memory.json
- Graph Bank 文件缺失 → 自動重新創建
- 環境配置錯誤 → 自動檢查 Node.js 和 yarn
- 依賴問題 → 自動執行 yarn install
- 權限問題 → 自動檢查文件系統權限
```

## 🔄 持續改進

### 自動化優化
- 自動監控系統健康狀態
- 自動優化初始化流程效率
- 自動改進錯誤檢測和處理
- 自動增強狀態報告詳細度
- 自動完善與其他模式的整合

### 版本自動更新
- 自動跟隨 MCP Memory Server 更新
- 自動適配 Graph Bank 結構變化
- 自動支持新的開發環境要求
- 自動整合新的依賴和工具