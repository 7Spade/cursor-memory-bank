---
description: Zero-cognition IMPLEMENT mode for code implementation
globs: "**/implement-mode-detailed*/**"
alwaysApply: false
---

# IMPLEMENT MODE - 零認知代碼實施

> **零認知原則**: 自動化代碼生成，智能實施流程，隱藏複雜實施邏輯

```mermaid
graph TD
    Start["⚒️ IMPLEMENT"] --> AutoImpl["⚡ 自動代碼實施"]
    AutoImpl --> Level{"🧩 複雜度級別?"}
    
    Level -->|"Level 1"| L1["🔧 快速修復"]
    Level -->|"Level 2"| L2["🔨 簡單增強"]
    Level -->|"Level 3-4"| L34["🏗️ 複雜功能"]
    
    L1 --> L1Auto["📝 自動修復"]
    L2 --> L2Auto["📝 自動增強"]
    L34 --> L34Auto["📝 分階段實施"]
    
    L1Auto --> Test["✅ 自動測試"]
    L2Auto --> Test
    L34Auto --> Test
    
    Test --> Verify["🔍 自動驗證"]
    Verify --> Next["⏭️ → REFLECT"]
    
    style Start fill:#4da6ff,stroke:#0066cc,color:white
    style AutoImpl fill:#ffa64d,stroke:#cc7a30,color:white
    style Test fill:#4dbb5f,stroke:#36873f,color:white
```
## ⚡ 自動化實施流程

### 🧩 複雜度確定
- **Level 1**: 快速修復 → 自動化修復流程
- **Level 2**: 簡單增強 → 自動化增強流程
- **Level 3-4**: 複雜功能 → 分階段自動化實施

### 📝 智能代碼生成
- **自動代碼分析**: 基於計劃和創意決策自動分析代碼需求
- **代碼生成**: 智能生成符合設計的代碼
- **代碼優化**: 自動優化代碼性能和可讀性
- **錯誤處理**: 自動處理常見的實施錯誤

### 🎯 零認知操作
- **實施模板自動選擇**: 根據複雜度自動選擇實施模板
- **測試自動執行**: 自動執行相關測試
- **驗證自動進行**: 自動驗證實施結果
- **Graph Bank 自動更新**: 實施結果自動同步到 Graph Bank

## 📊 智能實施報告

### 🔧 Level 1 快速修復
- **問題分析**: 自動分析問題根因
- **修復實施**: 自動生成修復代碼
- **測試驗證**: 自動執行修復測試
- **結果確認**: 自動確認修復效果

### 🔨 Level 2 簡單增強
- **需求分析**: 自動分析增強需求
- **代碼實施**: 自動生成增強代碼
- **功能測試**: 自動執行功能測試
- **整合驗證**: 自動驗證整合效果

### 🏗️ Level 3-4 複雜功能
- **分階段實施**: 自動分解為多個實施階段
- **階段性測試**: 每個階段自動測試
- **整合測試**: 自動執行整合測試
- **系統驗證**: 自動驗證系統功能

## ✅ 自動驗證

### 驗證檢查點
- **代碼品質**: 代碼是否符合品質標準
- **功能完整性**: 所有功能是否正確實施
- **測試覆蓋**: 測試是否覆蓋所有功能
- **整合穩定性**: 系統整合是否穩定

### 成功標準
- **實施完整性**: 所有計劃功能都已實施
- **代碼品質**: 代碼符合最佳實踐
- **測試通過**: 所有測試都通過
- **文檔完整**: 實施文檔完整

