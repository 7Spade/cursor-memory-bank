---
description: Adaptive structured workflow implementation protocol
globs: **/src/**", "**/.cursorrules", "**/memory-bank/**
alwaysApply: true
---
# ADAPTIVE STRUCTURED WORKFLOW PROTOCOL

> **TL;DR:** Follow a workflow process that scales based on task complexity. Level 1 (Bug Fix) uses a streamlined process, while Level 4 (Complex System) uses the complete formal process with all checkpoints.

## üîß TASK COMPLEXITY LEVELS

The workflow scales across four complexity levels:

1. **Level 1: Quick Bug Fix**
   - Simple errors, UI glitches, minor issues
   - Streamlined process with minimal documentation
   - Focus on rapid resolution and targeted updates

2. **Level 2: Simple Enhancement**
   - Small features, minor improvements
   - Basic process with essential documentation
   - Focus on clean implementation and clear documentation

3. **Level 3: Intermediate Feature**
   - Complete features, significant changes
   - Standard process with full section tracking
   - Focus on comprehensive planning and documentation

4. **Level 4: Complex System**
   - Major systems, architectural changes
   - Full formal process with detailed checkpoints
   - Focus on architectural integrity and complete documentation

## üö® SECTION TRANSITION MARKERS

These visual markers indicate workflow section transitions (Level 3-4 only):

```
======== INITIALIZATION COMPLETE ‚üπ STARTING DOCUMENTATION SETUP ========

======== DOCUMENTATION SETUP COMPLETE ‚üπ STARTING TASK PLANNING ========

======== TASK PLANNING COMPLETE ‚üπ STARTING IMPLEMENTATION ========

======== IMPLEMENTATION COMPLETE ‚üπ STARTING REFLECTION ========

======== REFLECTION COMPLETE ‚üπ STARTING ARCHIVING ========

======== ARCHIVING COMPLETE ‚üπ TASK FINISHED ========
```

## üö® CREATIVE PHASE MARKERS

For tasks requiring extended creative work:

```
======== ENTERING CREATIVE PHASE ========

======== EXITING CREATIVE PHASE - UPDATING TASKS ========
```

## üìã LEVEL-SPECIFIC SECTION TRACKING

### Level 1: Quick Bug Fix
```
## SIMPLIFIED TRACKING
[ ] Review relevant documentation
[ ] Identify and fix the issue
[ ] Verify the fix works
[ ] Update documentation
```

### Level 2: Simple Enhancement
```
## BASIC TRACKING
[ ] Review relevant Memory Bank files
[ ] Update documentation with plan
[ ] Implement the enhancement
[ ] Test functionality
[ ] Document changes
```

### Level 3-4: Intermediate Feature & Complex System
```
## SECTION PROGRESS
[ ] 1. INITIALIZATION
[ ] 2. DOCUMENTATION SETUP 
[ ] 3. TASK PLANNING
[ ] 4. IMPLEMENTATION
[ ] 5. REFLECTION
[ ] 6. ARCHIVING
```

## üîÑ SECTION UPDATE TEMPLATE

After completing each section:
```
üîÑ SECTION: [Section name] COMPLETE
[X] Updated section tracking
```

## üìö REFERENCE CHECK TEMPLATE

When consulting reference files:

```
üìö REFERENCE: [file name]
Key points:
- [Point 1]
- [Point 2]
- [Point 3]
‚úì Reference complete
```

## LEVEL 1: QUICK BUG FIX WORKFLOW

### 1Ô∏è‚É£ STREAMLINED INITIALIZATION
- Review directly relevant Memory Bank files
- State bug description and objective
- Identify platform (Windows/Mac/Linux)

### 2Ô∏è‚É£ RAPID IMPLEMENTATION
- Identify root cause through targeted investigation
- Execute commands one at a time
- Implement fix with minimal changes
- Verify the fix resolves the issue

### 3Ô∏è‚É£ QUICK DOCUMENTATION
- Document the issue and solution
- Update tasks.md with completion status
- Add brief implementation note to activeContext.md
- No formal archiving required

## LEVEL 2: SIMPLE ENHANCEMENT WORKFLOW

### 1Ô∏è‚É£ BASIC INITIALIZATION
- Review relevant Memory Bank files
- State enhancement objective
- Identify platform (Windows/Mac/Linux)
- Review/update .cursorrules if needed

### 2Ô∏è‚É£ SIMPLE DOCUMENTATION SETUP
- Update relevant Memory Bank files:
  * activeContext.md - Implementation plan
  * tasks.md - Task breakdown
  * Other files as needed

### 3Ô∏è‚É£ BASIC PLANNING
- Create 3-5 step implementation plan
- Document in tasks.md with [ ] markers
- Identify potential challenges

### 4Ô∏è‚É£ STANDARD IMPLEMENTATION
- Execute commands one at a time
- Document command purpose and result
- Update task status in tasks.md
- Add implementation details to activeContext.md

### 5Ô∏è‚É£ BRIEF REFLECTION
- Document what worked and challenges faced
- Note key learnings for future
- Update Memory Bank with insights

### 6Ô∏è‚É£ SIMPLE ARCHIVING
- Mark task as completed in tasks.md
- Update activeContext.md with completion status
- Reference in progress.md (if significant)

## LEVEL 3: INTERMEDIATE FEATURE WORKFLOW

### 1Ô∏è‚É£ STANDARD INITIALIZATION
- Review ALL Memory Bank files
- State feature objective in detail
- Identify platform and document requirements
- Review/create .cursorrules file
- Complete the reference check
- Make verification commitment

### 2Ô∏è‚É£ COMPLETE DOCUMENTATION SETUP
- Update all relevant Memory Bank files:
  * systemPatterns.md - Design decisions
  * techContext.md - Resources/tools
  * activeContext.md - Implementation plan
  * progress.md - Milestones/challenges
  * tasks.md - Create task breakdown

### 3Ô∏è‚É£ COMPREHENSIVE PLANNING
- Document detailed goals and success criteria
- Identify all required resources/tools
- Create comprehensive step-by-step plan
- Document testing/validation approach
- Complete the reference check

### 4Ô∏è‚É£ DETAILED IMPLEMENTATION
- Document each step in detail
- Execute commands one at a time
- Document results (success or failure)
- Update task status in tasks.md
- Add implementation details to activeContext.md

### 5Ô∏è‚É£ FULL REFLECTION
- Document all four required reflection subsections
- Include at least 3 items in "What Went Well"
- Include at least 2 items in "Challenges"
- Include at least 3 items in "Lessons Learned"
- Include at least 3 items in "Improvements for Next Time"
- Update Memory Bank files with learnings

### 6Ô∏è‚É£ STANDARD ARCHIVING
- Archive task in completed_tasks.md
- Mark task as completed in tasks.md
- Update progress.md with reference to completed task
- Update activeContext.md with next focus
- Complete the reference check

## LEVEL 4: COMPLEX SYSTEM WORKFLOW

### 1Ô∏è‚É£ COMPREHENSIVE INITIALIZATION
- Review ALL Memory Bank files in detail
- State complex system objective with architectural context
- Identify platform and document all requirements
- Review/create .cursorrules file with detailed patterns
- Complete all reference checks
- Make detailed verification commitment

### 2Ô∏è‚É£ EXTENSIVE DOCUMENTATION SETUP
- Update all Memory Bank files with comprehensive details:
  * systemPatterns.md - Architecture and design patterns
  * techContext.md - Complete technology stack
  * activeContext.md - Detailed implementation strategy
  * progress.md - Comprehensive milestones and dependencies
  * tasks.md - Create hierarchical task breakdown
  * .cursorrules - Add system-specific patterns

### 3Ô∏è‚É£ ARCHITECTURAL PLANNING
- Document detailed goals with measurable success criteria
- Identify all required resources, tools, and dependencies
- Create hierarchical step-by-step plan with dependencies
- Document comprehensive testing strategy
- Identify potential architectural risks
- Complete all reference checks

### 4Ô∏è‚É£ PHASED IMPLEMENTATION
- Break implementation into logical phases
- Document each step with architectural context
- Execute commands one at a time with validation
- Document all results with alternatives for failures
- Update task status in tasks.md after each significant step
- Add detailed implementation notes to activeContext.md
- Perform regular verification checks

### 5Ô∏è‚É£ COMPREHENSIVE REFLECTION
- Document extensive reflection with all subsections
- Include 5+ items in "What Went Well"
- Include 3+ items in "Challenges"
- Include 5+ items in "Lessons Learned"
- Include 5+ items in "Improvements for Next Time"
- Update all Memory Bank files with learnings
- Document architectural insights

### 6Ô∏è‚É£ DETAILED ARCHIVING
- Create comprehensive archive entry in completed_tasks.md
- Include architectural decisions and patterns
- Mark task as completed in tasks.md
- Update progress.md with detailed reference to completed task
- Update activeContext.md with next focus and architectural context
- Complete all reference checks
- Run full verification checklist

## ‚úì LEVEL-SPECIFIC CHECKPOINTS

### Level 1: Quick Bug Fix Checkpoint
```
‚úì BUG FIX CHECKPOINT:
- Root cause identified? [YES/NO]
- Fix implemented? [YES/NO]
- Solution verified? [YES/NO]
- Documentation updated? [YES/NO]

‚Üí If all YES: Task complete
‚Üí If any NO: Fix missing items before completing
```

### Level 2: Simple Enhancement Checkpoint
```
‚úì ENHANCEMENT CHECKPOINT:
- All steps completed? [YES/NO]
- Functionality tested? [YES/NO]
- Task status updated in tasks.md? [YES/NO]
- Implementation details documented? [YES/NO]

‚Üí If all YES: Task complete
‚Üí If any NO: Fix missing items before completing
```

### Level 3: Intermediate Feature Checkpoint
Standard section checkpoints as defined in section-checkpoint-system.mdc

### Level 4: Complex System Checkpoint
Comprehensive checkpoints as defined in verification-checklist.mdc

## üìã ESCALATION PROCESS

If during execution, the task proves more complex than initially categorized:

1. Document the need for escalation:
```
‚ö†Ô∏è TASK ESCALATION NEEDED
Current Level: [Level X]
Recommended Level: [Level Y]
Reason: [Brief explanation]
```

2. If escalation is approved:
- Adapt the workflow to the higher level
- Expand documentation as needed
- Create additional checkpoints
- Continue with enhanced process

3. If escalation is not approved:
- Continue with current level
- Document limitations
- Focus on critical elements
- Note potential gaps in final documentation

## üìù IMPLEMENTATION TIPS BY LEVEL

### Level 1: Quick Bug Fix
- Focus on the specific issue, avoid scope creep
- Document exact solution for future reference
- Add only essential information to Memory Bank

### Level 2: Simple Enhancement
- Keep the enhancement focused and self-contained
- Document integrations with existing components
- Test thoroughly but efficiently

### Level 3: Intermediate Feature
- Create clear boundaries between components
- Document all interfaces and interactions
- Implement comprehensive testing

### Level 4: Complex System
- Prioritize architectural integrity
- Document all design decisions and alternatives
- Create reusable patterns
- Implement staged testing and verification
