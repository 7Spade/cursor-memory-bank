# Memory Bank System - Cursor Rules

## 專案概述
這是一個基於 Cursor 的記憶銀行系統，提供分層任務管理和自定義模式整合，用於高效的開發工作流程。

## 開發環境
- 作業系統：Windows 11
- 包管理器：yarn
- 編輯器：Cursor (版本 0.48 或更高)
- AI 模型：Claude 4 Sonnet 或 Claude 4 Opus (推薦)

## 核心架構
- **分層規則載入**：僅載入必要規則，使用專門的延遲載入
- **漸進式文件**：簡潔的模板，隨任務複雜度擴展
- **統一上下文傳輸**：模式間高效的上下文保存
- **模式特定視覺地圖**：每個開發階段的清晰視覺表示

## 自定義模式
1. **VAN** (🔍) - 初始化：分析專案結構並確定複雜度
2. **PLAN** (📋) - 任務規劃：建立詳細的實施計劃
3. **CREATIVE** (🎨) - 設計決策：探索複雜組件的設計選項
4. **IMPLEMENT** (⚒️) - 代碼實施：系統性地構建計劃的組件
5. **REFLECT** (🔍) - 審查：回顧並記錄經驗教訓
6. **ARCHIVE** (📁) - 歸檔：建立全面的文件

## 工作流程
- **Level 1 任務**：VAN → IMPLEMENT
- **Level 2 任務**：VAN → PLAN → IMPLEMENT → REFLECT
- **Level 3-4 任務**：VAN → PLAN → CREATIVE → IMPLEMENT → REFLECT → ARCHIVE

## 核心文件
- `tasks.md`：任務追蹤的中央真實來源
- `activeContext.md`：維護當前開發階段的焦點
- `progress.md`：追蹤實施狀態
- `creative-*.md`：CREATIVE 模式期間生成的設計決策文件
- `reflect-*.md`：REFLECT 模式期間創建的審查文件

## 開發規範
- 使用繁體中文進行交流
- 遵循分層規則載入架構
- 保持代碼的模組化和可擴展性
- 優化 token 使用效率
- 確保模式間的無縫轉換

## 記憶體初始化協議
在執行任何 AI agent 動作之前，必須：

1. **檢查 memory.json 狀態**
   - 讀取當前記憶體內容
   - 驗證記憶體結構完整性
   - 載入相關上下文

2. **記憶體上下文載入**
   - 提取用戶偏好設定
   - 載入專案歷史記錄
   - 獲取相關決策記錄

3. **基線建立**
   - 基於記憶體內容建立對話基線
   - 確保回應的一致性和連續性

## Agent 記憶體檢查時機
- **VAN Agent**: 專案分析前檢查專案歷史、技術偏好
- **PLAN Agent**: 任務規劃前檢查規劃歷史、資源配置
- **CREATIVE Agent**: 設計決策前檢查設計歷史、創意偏好
- **IMPLEMENT Agent**: 代碼實施前檢查實施歷史、代碼風格
- **REFLECT Agent**: 審查開始前檢查審查歷史、改進記錄
- **ARCHIVE Agent**: 歸檔開始前檢查歸檔歷史、文件結構

## 品質保證
- 在任何模式下輸入 "QA" 可執行技術驗證
- 遵循漸進式文件方法
- 保持代碼的可讀性和可維護性
- 定期進行代碼審查和優化